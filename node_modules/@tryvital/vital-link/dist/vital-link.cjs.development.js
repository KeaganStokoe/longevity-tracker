'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var useScript = _interopDefault(require('react-script-hook'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var renameKeyInObject = function renameKeyInObject(o, oldKey, newKey) {
  var _Object$assign;

  var newObject = {};
  delete Object.assign(newObject, o, (_Object$assign = {}, _Object$assign[newKey] = o[oldKey], _Object$assign))[oldKey];
  return newObject;
};
/**
 * Wrap link handler creation and instance to clean up iframe via destroy() method
 */


var createVital = function createVital(options) {
  var state = {
    vital: null,
    open: false,
    onExitCallback: null
  }; // If Vital is not available, throw an Error

  if (typeof window === 'undefined' || !window.Vital) {
    throw new Error('Vital not loaded');
  }

  var config = renameKeyInObject(options, 'publicKey', 'key');
  state.vital = window.Vital.create(_extends({}, config, {
    onExit: function onExit() {
      state.open = false;
      config.onExit && config.onExit.apply(config, arguments);
      state.onExitCallback && state.onExitCallback();
    }
  }));

  var open = function open(token) {
    if (!state.vital) {
      return;
    }

    state.open = true;
    state.onExitCallback = null;
    state.vital.open(token);
  };

  var exit = function exit(exitOptions, callback) {
    if (!state.open || !state.vital) {
      callback && callback();
      return;
    }

    state.onExitCallback = callback;
    state.vital.exit(exitOptions);

    if (exitOptions && exitOptions.force) {
      state.open = false;
    }
  };

  var destroy = function destroy() {
    if (!state.vital) {
      return;
    }

    state.vital.destroy();
    state.vital = null;
  };

  return {
    open: open,
    exit: exit,
    destroy: destroy
  };
};

var noop = function noop() {};

var VITAL_LINK_STABLE_URL = 'https://link.tryvital.io/initialize.js';
/**
 * This hook loads Vital script and manages the Vital Link creation for you.
 * You get easy open & exit methods to call and loading & error states.
 *
 * This will destroy the Vital UI on un-mounting so it's up to you to be
 * graceful to the user.
 *
 * A new Vital instance is created every time the token and products options change.
 * It's up to you to prevent unnecessary re-creations on re-render.
 */

var useVitalLink = function useVitalLink(options) {
  // Asynchronously load the vital/link/stable url into the DOM
  var _useScript = useScript({
    src: VITAL_LINK_STABLE_URL,
    checkForExisting: true
  }),
      loading = _useScript[0],
      error = _useScript[1]; // internal state


  var _useState = React.useState(null),
      vital = _useState[0],
      setVital = _useState[1];

  var _useState2 = React.useState(false),
      iframeLoaded = _useState2[0],
      setIframeLoaded = _useState2[1];

  React.useEffect(function () {
    // If the link.js script is still loading, return prematurely
    if (loading) {
      return;
    }

    if (error || !window.Vital) {
      // eslint-disable-next-line no-console
      console.error('Error loading Vital', error);
      return;
    } // if an old vital instance exists, destroy it before
    // creating a new one


    if (vital != null) {
      vital.exit({
        force: true
      }, function () {
        return vital.destroy();
      });
    }

    var next = createVital(_extends({}, options, {
      onLoad: function onLoad() {
        setIframeLoaded(true);
        options.onLoad && options.onLoad();
      }
    }));
    setVital(next); // destroy the Vital iframe factory

    return function () {
      return next.exit({
        force: true
      }, function () {
        return next.destroy();
      });
    };
  }, [loading, error]);
  return {
    error: error,
    ready: vital != null && (!loading || iframeLoaded),
    exit: vital ? vital.exit : noop,
    open: vital ? vital.open : noop
  };
};

var VitalLink = function VitalLink(props) {
  var children = props.children,
      style = props.style,
      className = props.className,
      config = _objectWithoutPropertiesLoose(props, ["children", "style", "className"]);

  var _useVitalLink = useVitalLink(_extends({}, config)),
      error = _useVitalLink.error,
      open = _useVitalLink.open;

  return React__default.createElement("button", {
    disabled: Boolean(error),
    type: "button",
    className: className,
    style: _extends({
      padding: '6px 4px',
      outline: 'none',
      background: '#FFFFFF',
      border: '2px solid #F1F1F1',
      borderRadius: '4px'
    }, style),
    onClick: function onClick() {
      return open();
    }
  }, children);
};
VitalLink.displayName = 'VitalLink';

exports.VitalLink = VitalLink;
exports.useVitalLink = useVitalLink;
//# sourceMappingURL=vital-link.cjs.development.js.map
